// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId  String @unique
  email  String @unique
  firstName  String? @unique
  lastName  String? @unique
  createdAt DateTime  @default(now())
  subscription Subscription? // a user can have a single subscription or he/she maybe using a free plan
  automations  Automation[] // this is the automated response
  integrations Integrations[] // this is the connection with the instagram API

}

model Subscription {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User    User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String? @unique @db.Uuid
}

model Automation {
    id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name     String @default("Untitled")
    createdAt DateTime @default(now())
    active Boolean @default(false)
    User    User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String?  @db.Uuid
    trigger Trigger[]
    listener Listener?
    posts Post[]
    dms   Dms[]
    keywords  Keyword[]

}


model Dms {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId String? @db.Uuid
  createdAt DateTime @default(now())
  message String?
  receiver String?
  senderId String?
  Automation Automation? @relation(fields: [automationId], references: [id])
}


model Integrations {
      id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
      name INTEGRATIONS @default(INSTAGRAM)
      createdAt DateTime @default(now())
      user User? @relation(references: [id], fields: [userId], onDelete: Cascade)
      userId String @db.Uuid
      token String @unique
      expiresAt DateTime?
      instagramId String? @unique

}


model Listener {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String @unique @db.Uuid
  listener LISTENERS @default(MESSAGE)
  prompt String
  commentReply String?
  dmCount Int @default(0)
  commentCount Int @default(0)
}


model Trigger{
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type    String 
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}


model Post {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId   String
  mediaType MEDIATYPE @default(IMAGE)
  automationId String? @db.Uuid
  caption  String?
  media    String
  Automation Automation? @relation(references: [id], fields: [automationId], onDelete: Cascade)
}


model Keyword {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word String
  automationId String? @db.Uuid
  Automation Automation? @relation(references: [id], fields: [automationId], onDelete: Cascade)
  @@unique([automationId, word]) //this ensures that user doesnt use the same keyword for multiple automations
}


enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}